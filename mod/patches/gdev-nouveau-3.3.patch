diff --git a/drivers/gpu/drm/nouveau/Makefile b/drivers/gpu/drm/nouveau/Makefile
index 1a2ad7e..a88eec5 100644
--- a/drivers/gpu/drm/nouveau/Makefile
+++ b/drivers/gpu/drm/nouveau/Makefile
@@ -3,7 +3,8 @@
 # Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.
 
 ccflags-y := -Iinclude/drm
-nouveau-y := nouveau_drv.o nouveau_state.o nouveau_channel.o nouveau_mem.o \
+nouveau-y := gdev_interface.o \
+             nouveau_drv.o nouveau_state.o nouveau_channel.o nouveau_mem.o \
              nouveau_object.o nouveau_irq.o nouveau_notifier.o \
              nouveau_sgdma.o nouveau_dma.o nouveau_util.o \
              nouveau_bo.o nouveau_fence.o nouveau_gem.o nouveau_ttm.o \
diff --git a/drivers/gpu/drm/nouveau/nouveau_channel.c b/drivers/gpu/drm/nouveau/nouveau_channel.c
index a018def..06a617f 100644
--- a/drivers/gpu/drm/nouveau/nouveau_channel.c
+++ b/drivers/gpu/drm/nouveau/nouveau_channel.c
@@ -188,7 +188,7 @@ nouveau_channel_alloc(struct drm_device *dev, struct nouveau_channel **chan_ret,
 	chan->user_put = 0x40;
 	chan->user_get = 0x44;
 	if (dev_priv->card_type >= NV_50)
-                chan->user_get_hi = 0x60;
+		chan->user_get_hi = 0x60;
 
 	/* disable the fifo caches */
 	pfifo->reassign(dev, false);
diff --git a/drivers/gpu/drm/nouveau/nouveau_drv.c b/drivers/gpu/drm/nouveau/nouveau_drv.c
index 4f2030b..e678716 100644
--- a/drivers/gpu/drm/nouveau/nouveau_drv.c
+++ b/drivers/gpu/drm/nouveau/nouveau_drv.c
@@ -460,8 +460,38 @@ static struct pci_driver nouveau_pci_driver = {
 		.resume = nouveau_pci_resume
 };
 
+static int __get_device_count(void)
+{
+	struct pci_dev *pdev = NULL;
+	const struct pci_device_id *pid;
+	int i;
+	int count = 0;
+
+	for (i = 0; pciidlist[i].vendor != 0; i++) {
+		pid = &pciidlist[i];
+		while ((pdev = pci_get_subsys(pid->vendor, pid->device, pid->subvendor, pid->subdevice, pdev)) != NULL) {
+			if ((pdev->class & pid->class_mask) != pid->class)
+				continue;
+			count++; /* physical device count */
+		}
+	}
+
+	return count;
+}
+
+int nouveau_device_count = 0;
+struct drm_device **nouveau_drm;
+
 static int __init nouveau_init(void)
 {
+	nouveau_device_count = __get_device_count();
+
+	nouveau_drm = kzalloc(sizeof(*nouveau_drm) * nouveau_device_count, GFP_KERNEL);
+	if (!nouveau_drm) {
+		printk(KERN_INFO "Failed to allocate nouveau drm array\n");
+		return -ENOMEM;
+	}
+
 	driver.num_ioctls = nouveau_max_ioctl;
 
 	if (nouveau_modeset == -1) {
diff --git a/drivers/gpu/drm/nouveau/nouveau_state.c b/drivers/gpu/drm/nouveau/nouveau_state.c
index 1e04305..79a962c 100644
--- a/drivers/gpu/drm/nouveau/nouveau_state.c
+++ b/drivers/gpu/drm/nouveau/nouveau_state.c
@@ -990,6 +990,9 @@ static int nouveau_remove_conflicting_drivers(struct drm_device *dev)
 	return 0;
 }
 
+extern int nouveau_device_count;
+extern struct drm_device **nouveau_drm;
+
 int nouveau_load(struct drm_device *dev, unsigned long flags)
 {
 	struct drm_nouveau_private *dev_priv;
@@ -1161,6 +1164,9 @@ int nouveau_load(struct drm_device *dev, unsigned long flags)
 	if (ret)
 		goto err_ramin;
 
+	if (dev->primary->index < nouveau_device_count)
+		nouveau_drm[dev->primary->index] = dev;
+
 	return 0;
 
 err_ramin:
diff --git a/drivers/gpu/drm/nouveau/nvc0_graph.c b/drivers/gpu/drm/nouveau/nvc0_graph.c
index 8ee3963..bbc6420 100644
--- a/drivers/gpu/drm/nouveau/nvc0_graph.c
+++ b/drivers/gpu/drm/nouveau/nvc0_graph.c
@@ -662,6 +662,8 @@ nvc0_graph_ctxctl_isr(struct drm_device *dev)
 	nv_wr32(dev, 0x409c20, ustat);
 }
 
+void (*nouveau_callback_notify)(int subc, uint32_t data) = NULL;
+
 static void
 nvc0_graph_isr(struct drm_device *dev)
 {
@@ -675,6 +677,14 @@ nvc0_graph_isr(struct drm_device *dev)
 	u32 code = nv_rd32(dev, 0x400110);
 	u32 class = nv_rd32(dev, 0x404200 + (subc * 4));
 
+	if (stat & 0x00000001) {
+		if (nouveau_callback_notify) {
+			nouveau_callback_notify(subc, data);
+		}
+		nv_wr32(dev, 0x400100, 0x00000001);
+		stat &= ~0x00000001;
+	}
+
 	if (stat & 0x00000010) {
 		if (nouveau_gpuobj_mthd_call2(dev, chid, class, mthd, data)) {
 			NV_INFO(dev, "PGRAPH: ILLEGAL_MTHD ch %d [0x%010llx] "
