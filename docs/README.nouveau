#####################################################################
## Gdev: Open-Source GPGPU Runtime and Driver Software
## 
## README.gdev
##
## Copyright (C) Shinpei Kato
##
## Nagoya University
## Parallel and Distributed Systems Lab (PDSL)
## http://pdsl.jp
##
## University of California, Santa Cruz
## Systems Research Lab (SRL)
## http://systems.soe.ucsc.edu
##
## All Rights Reserved.
######################################################################

Follow the instruction below to use Gdev's user-space runtime library
with Nouveau. You may be required to install additional software 
packages depending on your environment. $(TOPDIR) represents your top
working directory.

1. Download

cd $(TOPDIR)
git clone git://github.com/CS005/gdev.git

2. Linux Kernel and Nouveau Device Driver

To use Gdev's user-space runtime library, you need to install a
native GPU device driver. 

cd $(TOPDIR)
git clone --depth 1 git://anongit.freedesktop.org/nouveau/linux-2.6
cd linux-2.6
git remote add nouveau git://anongit.freedesktop.org/nouveau/linux-2.6
git remote update
git checkout -b nouveau-master nouveau/master
make oldconfig
make 
sudo make modules_install install
sudo shutdown -r now # will reboot your machine
modprobe -r nouveau; modprobe nouveau modeset=1 noaccel=0

3. Gdev Library

Gdev's user-space library provides Gdev API. This API can be used
by either user programs directly or another high-level API library.
For instance, third party's CUDA libraries may use Gdev API.

The Gdev user-space runtime library requires Nouveau's LIBDRM.
You would need to install at least the following packages to build:
    autoconf, automake, libtool, libxcb-devel, libpciaccess-devel

cd $(TOPDIR)
git clone git://anongit.freedesktop.org/git/mesa/drm/
cd drm
./autogen.sh
./configure --enable-nouveau-experimental-api --prefix=/usr/
make
sudo make install

Now you build the Gdev user-space runtime library as follows:

cd $(TOPDIR)/gdev/lib
mkdir build
cd build
../configure --target=user
EXTRA_CFLAGS="-I /usr/include/libdrm" make
sudo make install
export LD_LIBRARY_PATH="/usr/local/gdev/lib64:$LD_LIBRARY_PATH"
export PATH="/usr/local/gdev/bin:$PATH"

4. CUDA Driver API

Gdev currently supports a limited set of CUDA Driver API. We plan to 
support a full set of CUDA Driver API in future work. If you need
CUDA Runtime API, you should use some compiler framework, such as
Ocelot, which can translate CUDA Drier API to Runtime API.

cd $(TOPDIR)/gdev/cuda
mkdir build
cd build
../configure
make
sudo make install

5. CUDA Driver API test (user-space programs)

cd $(TOPDIR)/test/cuda/user/madd
make # you will need to add "-ldrm -ldrm_nouveau -L /usr/lib"
./user_test 256 # a[256] + b[256] = c[256]

make
sudo insmod ./kernel_test.ko size=10000 # copy 0x10000 size

NOTE: Please be careful when doing this test as it runs a program
in module_init(). If you run a very long program as it is, you may
crash your system. If you want to run a very long program, you must
provide a proper module implementation, e.g., using kernel threads.
